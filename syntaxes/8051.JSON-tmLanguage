{
    "name": "8051 Assembly",
    "scopeName": "source.asm.8051",
    "fileTypes": ["asm", "a51", "h51"],
    "patterns": [
        {
            "match": ";.*$", 
            "name": "comment.line"
        },
        {
            "match": "(?i)\\b(dword|qword|tword|db|dw|dd|dq|dt|do|dy|ds|dbit|resb|resw|resd|resq|rest|reso|resy|incbin|equ|times)\\b", 
            "name": "support.type.asm"
        }, 
        {
            "match": "\\.(data|bss|text)$", 
            "name": "string.section"
        }, 
        {
            "begin": "[\"']", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.asm"
                }
            }, 
            "end": "[\"']", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.asm"
                }
            }, 
            "name": "string.quoted.asm", 
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }, 
                {
                    "include": "#string_placeholder"
                }
            ]
        }, 
        {
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.c"
                }
            }, 
            "end": "'", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.c"
                }
            }, 
            "name": "string.quoted.single.c", 
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }
            ]
        }, 
        {
            "begin": "^\\s*[#%]\\s*(error|warning)\\b", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.error.c"
                }
            }, 
            "end": "$", 
            "name": "meta.preprocessor.diagnostic.c", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.c"
                }
            ]
        }, 
        {
            "begin": "^\\s*[#%]\\s*(include|import)\\b\\s+", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.include.c"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.c.include", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.c"
                }, 
                {
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.c"
                        }
                    }, 
                    "end": "\"", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.c"
                        }
                    }, 
                    "name": "string.quoted.double.include.c"
                }, 
                {
                    "begin": "<", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.c"
                        }
                    }, 
                    "end": ">", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.c"
                        }
                    }, 
                    "name": "string.quoted.other.lt-gt.include.c"
                }
            ]
        }, 
        {
            "begin": "^\\s*[%#]\\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\\b", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.c"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.c", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.c"
                }
            ]
        }, 
        {
            "match": "(?i)\\b(r[0-7])\\b",
            "name": "variable.parameter.regular"
        },
        {
            "match": "(?i)\\b(p[0-3]|[pt]con|tmod|t[lh][01]|dp([lh]|tr)|scon|sbuf|i[ep]|sp|psw|a(cc)?|b|c|ar[0-7])\\b",
            "name": "variable.parameter.special"
        },
        {
            "match": "(?i)\\b(addc?|subb|inc|dec|mul|div|da|clr|cpl|r[lr]c?|swap)\\b", 
            "name": "keyword.operator.mnemonic.math"
        },
        {
            "match": "(?i)\\b((an|or|xr)l)\\b", 
            "name": "keyword.operator.mnemonic.logic"
        },
        {
            "match": "(?i)\\b(clr|setb|cpl|anl|orl|mov)\\b", 
            "name": "keyword.mnemonic.bool"
        },
        {
            "match": "(?i)\\b([al]call|reti?|[als]?jmp|j(n?z|n?c|n?b|bc)|cjne|djnz|nop)\\b", 
            "name": "keyword.control.mnemonic.flow"
        },
        {
            "match": "(?i)\\b(mov[cx]?|push|pop|xchd?)\\b", 
            "name": "keyword.other.mnemonic.data"
        },
        {
            "match": "^\\s*\\.?\\w+:\\s*(?=$|;)", 
            "name": "entity.name.label"
        },
        {
            "match": "\\$[0-9a-f]+\\b", 
            "name": "constant.numeric.literal"
        }, 
        {
            "match": "\\b[0-9]+\\b", 
            "name": "constant.numeric.dec"
        }, 
        {
            "match": "\\b([0-9a-fA-F]+[hH])\\b", 
            "name": "constant.numeric.hex"
        },
        {
            "match": "\\b([01]+[bB])\\b",
            "name": "constant.numeric.bin"
        },
        {
            "match": "\\@\\w+(\\+\\w+)?", 
            "name": "storage.modifier.indirect"
        },
        {
            "match": "\\#\\w+(\\+\\w+)?", 
            "name": "storage.modifier.immediate"
        },
        {
            "match": "^\\.?(globl|global)\\b", 
            "name": "entity.directive"
        }
    ],
    "uuid": "e8946f0f-a287-4340-943d-fc3954651928"
}